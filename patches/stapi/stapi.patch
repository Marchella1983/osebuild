Index: Makefile
===================================================================
--- Makefile	(revision 11438)
+++ Makefile	(working copy)
@@ -91,7 +91,9 @@
 TARGET := $(shell $(CC) -dumpmachine 2>/dev/null)
 
 # Process USE_ variables
+ifneq ($(AL_MODEL),supremo)
 DEFAULT_STAPI_LIB = -L./stapi -loscam_stapi
+endif
 DEFAULT_STAPI5_LIB = -L./stapi -loscam_stapi5
 DEFAULT_COOLAPI_LIB = -lnxp -lrt
 DEFAULT_COOLAPI2_LIB = -llnxUKAL -llnxcssUsr -llnxscsUsr -llnxnotifyqUsr -llnxplatUsr -lrt
Index: csctapi/ifd_stapi.c
===================================================================
--- csctapi/ifd_stapi.c	(revision 11438)
+++ csctapi/ifd_stapi.c	(working copy)
@@ -37,6 +37,10 @@
 	STReader_GetRevision();
 #endif
 	
+#if defined(supremo)
+	WiSmart_Init();
+#endif
+
 	return STReader_Open(reader->device, &crdr_data->stapi_handle);
 }
 
Index: module-dvbapi-stapi.c
===================================================================
--- module-dvbapi-stapi.c	(revision 11438)
+++ module-dvbapi-stapi.c	(working copy)
@@ -71,6 +71,25 @@
 static pthread_mutex_t filter_lock;
 static struct STDEVICE dev_list[PTINUM];
 
+#if defined(supremo)
+static void parse_pmt_filename(char *pmtfile, int *dmxid, int *channel)
+{
+	int i;
+	char file[132];
+
+	for (i = 0; i < strlen(pmtfile); i++)
+	{
+		if (isdigit(pmtfile[i]))
+			file[i] = pmtfile[i];
+		else
+			file[i] = ' ';
+	}
+	file[i] = '\0';
+
+	sscanf(file, "%d %d", dmxid, channel);
+} // parse_pmt_filename
+#endif
+
 static void stapi_off(void)
 {
 	int32_t i;
@@ -94,7 +113,9 @@
 			{
 				oscam_stapi_SignalAbort(dev_list[i].SignalHandle);
 			}
+#if !defined(supremo)
 			pthread_cancel(dev_list[i].thread);
+#endif
 		}
 	}
 
@@ -105,14 +126,15 @@
 
 int32_t stapi_open(void)
 {
+	stapi_on = 1;
+	int32_t i;
+#if !defined(supremo)
 	uint32_t ErrorCode;
 
 	DIR *dirp;
 	struct dirent entry, *dp = NULL;
 	struct stat buf;
-	int32_t i;
 	char pfad[80];
-	stapi_on = 1;
 	int32_t stapi_priority = 0;
 
 	dirp = opendir(PROCDIR);
@@ -121,9 +143,14 @@
 		cs_log("opendir failed (errno=%d %s)", errno, strerror(errno));
 		return 0;
 	}
+#else
+	WiDemux_Init();
+	cs_log("[%s] dvbapi_priority(%p)", __func__, dvbapi_priority);
+#endif
 
 	memset(dev_list, 0, sizeof(struct STDEVICE)*PTINUM);
 
+#if !defined(supremo)
 	if(dvbapi_priority)
 	{
 		struct s_dvbapi_priority *p;
@@ -199,10 +226,23 @@
 	closedir(dirp);
 
 	if(i == 0) { return 0; }
+#else
+	//ST_DeviceName_t  PTI_DeviceName[]={"PTI","PTI1","SWTS0","PTI2","SWTS1","SWTS2","PTI6","PTI7"};
 
+	oscam_stapi_Open("PTI", &dev_list[0].SessionHandle);
+	cs_strncpy(dev_list[0].name, "stapi", sizeof(dev_list[0].name));  // pmt1_x.tmp
+
+	oscam_stapi_Open("PTI1", &dev_list[1].SessionHandle);
+	cs_strncpy(dev_list[1].name, "stapi1", sizeof(dev_list[1].name)); // pmt2_x.tmp
+#endif
+
 	SAFE_MUTEX_INIT(&filter_lock, NULL);
 
+#if defined(supremo)
+	for(i = 0; i < 1; i++)
+#else
 	for(i = 0; i < PTINUM; i++)
+#endif
 	{
 		if(dev_list[i].SessionHandle == 0)
 			{ continue; }
@@ -260,6 +300,10 @@
 
 	cs_log_dbg(D_DVBAPI, "pmt file %s demux_id %d", pmtfile, demux_id);
 
+#if defined(supremo)
+	int dmxid, channel;
+	parse_pmt_filename(pmtfile, &dmxid, &channel);
+#endif
 	for(p = dvbapi_priority; p != NULL; p = p->next)
 	{
 		if(p->type != 's') { continue; }  // stapi rule?
@@ -267,10 +311,17 @@
 
 		for(i = 0; i < PTINUM; i++)
 		{
+#if defined(supremo)
+			cs_log_dbg(D_DVBAPI, "%d [%s][%s]", i, dev_list[i].name, p->devname);
+#endif
 			if(strcmp(dev_list[i].name, p->devname) == 0 && p->disablefilter == 0)  // check device name and if filtering is enabled!
 			{
 				cs_log_dbg(D_DVBAPI, "set stapi filter on %s for pid %04X", dev_list[i].name, pids[0]);
+#if defined(supremo)
+				ret = stapi_do_set_filter(/*demux_id*/(dmxid << 8) | (channel << 0), &dev_list[i].demux_fd[demux_id][num], pids, 1, filter, mask, i);
+#else
 				ret = stapi_do_set_filter(demux_id, &dev_list[i].demux_fd[demux_id][num], pids, 1, filter, mask, i);
+#endif
 				if(ret > 0)    // success
 				{
 					cs_log_dbg(D_DVBAPI, "%s filter %d set (pid %04X)", dev_list[i].name, num, pid);
@@ -326,7 +377,7 @@
 	}
 	return ret;
 }
-
+#if !defined(supremo)
 static uint32_t check_slot(int32_t dev_id, uint32_t checkslot, FILTERTYPE *skipfilter)
 {
 	int32_t d, f, l;
@@ -347,19 +398,129 @@
 	}
 	return 0;
 }
+#endif
 
-
+#if defined(supremo)
+static int32_t stapi_do_set_filter(int32_t sel, FILTERTYPE *filter, uint16_t *pids, int32_t pidcount, uchar *filt, uchar *mask, int32_t dev_id)
+#else
 static int32_t stapi_do_set_filter(int32_t demux_id, FILTERTYPE *filter, uint16_t *pids, int32_t pidcount, uchar *filt, uchar *mask, int32_t dev_id)
+#endif
 {
+#if !defined(supremo)
 	uint32_t FilterAssociateError = 0;
+#endif
 	int32_t k, ret = 0;
 
 	filter->fd          = 0;
+#if !defined(supremo)
 	filter->BufferHandle[0]     = 0;
+#endif
 	filter->SlotHandle[0]   = 0;
 
 	if(dev_list[dev_id].SessionHandle == 0) { return 0; }
 
+#if defined(supremo)
+	int section = 0;
+	int continues = 0;
+
+	cs_log("[%s] dev_id(%d) SessionHandle [0x%08x]", __func__, dev_id, dev_list[dev_id].SessionHandle );
+	cs_log("[%s] %d.pid=[%04x] type(%d)", __func__, 0,  pids[0], filter->type);
+
+	if ((filt[0] & 0xF0) == 0x80)
+	{
+		section   = 1;
+		continues = 1;
+	}
+	else
+	{
+		section   = 0;
+		continues = 0;
+	}
+
+	switch (filter->type)
+	{
+	case TYPE_ECM:
+		section   = 1;
+		continues = 1;
+		break;
+
+	case TYPE_EMM:
+		section   = 0;
+		continues = 0;
+		break;
+
+	case TYPE_SDT:
+	case TYPE_PAT:
+	case TYPE_PMT:
+		section   = 0;
+		continues = 0;
+		break;
+
+	default:
+		break;
+	}
+
+	WiDumpMemory(filt, 8, 2);
+	WiDumpMemory(mask, 8, 2);
+
+	ret = WiDemux_FilterStart(
+	                    /*dev_list[dev_id].SessionHandle*/sel,
+	                    pids[0],
+	                    16,
+	                    filt, mask,
+	                    section,    // 0:table filter, not 0:section filter
+	                    continues,    // continue
+	                    0,    // queue
+	                    0,    // use callback
+	                    0,    // no timeout
+	                    0);
+
+	cs_log_dbg(D_DVBAPI, "### %s at line %d...0x%08x, sel = 0x%08x, dev_list[dev_id = %d].SessionHandle = 0x%08x ### type = %d\n", __FILE__, __LINE__, ret, sel, dev_id, dev_list[dev_id].SessionHandle, filter->type);
+
+	if(ret == -1)
+	{
+		cs_log("[%s] problem : pid=[%04x]", __func__, pids[0]);
+		return 0;
+	}
+
+	filter->fd = ret;
+	filter->NumSlots = 1;
+
+	for(k = 1; k < pidcount; k++)
+	{
+		cs_log("[%s] %d.pid=[%04x]", __func__, k,  pids[k]);
+
+		WiDumpMemory(filt, 8, 2);
+		WiDumpMemory(mask, 8, 2);
+
+		ret = WiDemux_FilterStart(
+		                    /*dev_list[dev_id].SessionHandle*/sel,
+		                    pids[k],
+		                    16,
+		                    filt, mask,
+		                    section,    // 0:table filter, not 0:section filter
+		                    continues,    // continue
+		                    0,    // queue
+		                    0,    // use callback
+		                    0,    // no timeout
+		                    0);
+
+		cs_log_dbg(D_DVBAPI, "### %s at line %d...0x%08x ####", __FILE__, __LINE__, ret);
+
+		if(ret == -1)
+		{
+			cs_log("[%s] problem1 : pid %d=[%04x]",  __func__, k, pids[k]);
+			return 0;
+		}
+
+		filter->NumSlots++;
+		filter->SlotHandle[k] = ret;
+	}
+
+	cs_log_dbg(D_DVBAPI, "[%s] fd[0x%08x] end\n", __func__, filter->fd);
+
+	return filter->fd; // no error
+#else
 	uint32_t FilterAllocateError = oscam_stapi_FilterAllocate(dev_list[dev_id].SessionHandle, &filter->fd);
 
 	if(FilterAllocateError != 0)
@@ -414,17 +575,36 @@
 	{
 		return filter->fd; // return fd of filter
 	}
+#endif
 }
 
 static int32_t stapi_do_remove_filter(int32_t UNUSED(demux_id), FILTERTYPE *filter, int32_t dev_id)
 {
 	if(filter->fd == 0) { return 0; }
-
+#if !defined(supremo)
 	uint32_t BufferDeallocateError = 0, SlotDeallocateError = 0;
-
+#endif
 	if(dev_list[dev_id].SessionHandle == 0) { return 0; }
 
 	int32_t k;
+#if defined(supremo)
+	cs_log("[%s] dev_id(%d) SessionHandle [0x%08x] NumSlots(%d)", __func__, dev_id, dev_list[dev_id].SessionHandle, filter->NumSlots );
+	if(filter->NumSlots > 1)
+	{
+		for(k = 1; k < filter->NumSlots; k++)
+		{
+			WiDemux_FilterStop(filter->SlotHandle[k]);
+		}
+	}
+
+	if(WiDemux_FilterStop(filter->fd) == 0) // ok
+	{
+		return 1;
+	}
+
+	return 0; // err
+
+#else
 	for(k = 0; k < filter->NumSlots; k++)
 	{
 		uint32_t checkslot = check_slot(dev_id, filter->SlotHandle[k], filter);
@@ -449,6 +629,7 @@
 	{
 		return 1;
 	}
+#endif
 }
 
 static void stapi_cleanup_thread(void *dev)
@@ -472,14 +653,17 @@
 	dev_index = para->id;
 
 	SAFE_SETSPECIFIC(getclient, para->cli);
+#if !defined(supremo)
 	pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);
+#endif
 	pthread_cleanup_push(stapi_cleanup_thread, (void *) dev_index);
-
+#if !defined(supremo)
 	int32_t error_count = 0;
-
+#endif
 	while(!exit_oscam)
 	{
 		QueryBufferHandle = 0;
+#if !defined(supremo)
 		ErrorCode = oscam_stapi_SignalWaitBuffer(dev_list[dev_index].SignalHandle, &QueryBufferHandle, 1000);
 
 		switch(ErrorCode)
@@ -512,6 +696,7 @@
 			continue;
 			break;
 		}
+#endif
 
 		uint32_t NumFilterMatches = 0;
 		int32_t demux_id = 0, filter_num = 0;
@@ -538,6 +723,10 @@
 			{
 				for(j = 0; j < MAX_FILTER; j++)
 				{
+#if defined(supremo)
+					for (dev_index = 0; dev_index < PTINUM; dev_index++)
+#endif
+					{
 					if(dev_list[dev_index].demux_fd[i][j].fd == MatchedFilterList[k])
 					{
 						demux_id = i;
@@ -544,10 +733,42 @@
 						filter_num = j;
 
 						dvbapi_process_input(demux_id, filter_num, buf, DataSize, 0);
+#if defined(supremo)
+							goto _read_end;
+#endif
 					}
+
+#if defined(supremo)
+						if (dev_list[dev_index].demux_fd[i][j].NumSlots > 1)
+						{
+							uint32_t l;
+							for (l = 1; l < dev_list[dev_index].demux_fd[i][j].NumSlots; l++)
+							{
+								if (dev_list[dev_index].demux_fd[i][j].SlotHandle[l] == MatchedFilterList[k])
+								{
+									//cs_log("[%s] ####@@@ filter-id[0x%08x] demux(%d) filter-num(%d)", __func__, MatchedFilterList[k], i, j);
+									dvbapi_process_input(i, j, buf, DataSize, 0);
+									goto _read_end;
+								}
+							}
+						}
+#endif
+					}
 				}
 			}
+#if defined(supremo)
+			if (i == MAX_DEMUX)
+			{
+				//cs_log("[%s] ####### unknown filter...(0x%08x)", __func__, MatchedFilterList[k]);
+				WiDemux_FilterStop(MatchedFilterList[k]);
+			}
+#endif
 		}
+
+
+#if defined(supremo)
+_read_end :
+#endif
 		SAFE_MUTEX_UNLOCK(&filter_lock);
 	}
 	
@@ -562,6 +783,7 @@
 #define DE_START 0
 #define DE_STOP 1
 
+#if !defined(supremo)
 static void stapi_DescramblerAssociate(int32_t demux_id, uint16_t pid, int32_t mode, int32_t n)
 {
 	uint32_t Slot = 0;
@@ -621,6 +843,7 @@
 
 	return;
 }
+#endif
 
 static void stapi_startdescrambler(int32_t demux_id, int32_t dev_index, int32_t mode)
 {
@@ -673,13 +896,19 @@
 
 int32_t stapi_write_cw(int32_t demux_id, uchar *cw, uint16_t *STREAMpids, int32_t STREAMpidcount, char *pmtfile)
 {
+#if !defined(supremo)
 	int32_t ErrorCode, l, n, k;
 	unsigned char nullcw[8];
 	memset(nullcw, 0, 8);
 	char *text[] = { "even", "odd" };
-
+#endif
 	if(!pmtfile) { return 0; }
 
+#if defined(supremo)
+
+	int32_t n;
+	int dmxid, channel;
+
 	for(n = 0; n < PTINUM; n++)
 	{
 		if(dev_list[n].SessionHandle == 0) { continue; }
@@ -693,8 +922,33 @@
 				if(strcmp(pmtfile, p->pmtfile) != 0)
 					{ continue; }
 
+				parse_pmt_filename(pmtfile, &dmxid, &channel);
 				if(strcmp(dev_list[n].name, p->devname) == 0)
 				{
+					//cs_log_dbg(D_DVBAPI, "start descrambling PTI: %s", dev_list[n].name);
+					stapi_startdescrambler(demux_id, n, DE_START);
+				}
+			}
+		}
+
+		if(demux[demux_id].DescramblerHandle[n] == 0) { continue; }
+		WiDemux_DescramblerKeyExt((dmxid << 8) | (channel << 0), STREAMpids, STREAMpidcount, cw);
+	}
+#else
+	for(n = 0; n < PTINUM; n++)
+	{
+		if(dev_list[n].SessionHandle == 0) { continue; }
+		if(demux[demux_id].DescramblerHandle[n] == 0)
+		{
+			struct s_dvbapi_priority *p;
+			for(p = dvbapi_priority; p != NULL; p = p->next)
+			{
+				if(p->type != 's') { continue; }
+				if(strcmp(pmtfile, p->pmtfile) != 0)
+					{ continue; }
+
+				if(strcmp(dev_list[n].name, p->devname) == 0)
+				{
 					cs_log_dbg(D_DVBAPI, "start descrambling PTI: %s", dev_list[n].name);
 					stapi_startdescrambler(demux_id, n, DE_START);
 				}
@@ -736,6 +990,7 @@
 			}
 		}
 	}
+#endif
 
 	return 1;
 }
Index: module-dvbapi.c
===================================================================
--- module-dvbapi.c	(revision 11438)
+++ module-dvbapi.c	(working copy)
@@ -287,7 +287,9 @@
 static int32_t selected_box = -1;
 static int32_t selected_api = -1;
 static int32_t maxfilter = MAX_FILTER;
+#if !defined(supremo)
 static int32_t dir_fd = -1;
+#endif
 static uint16_t last_client_proto_version = 0;
 static char* last_client_name = NULL;
 
@@ -727,11 +729,31 @@
 {
 	int32_t ret = -1, n = -1, i, filterfd = -1;
 
-	for(i = 0; i < maxfilter && demux[demux_id].demux_fd[i].fd > 0; i++) { ; }
+#if defined(supremo)
+	int32_t more_cnt = 0;
+#endif
 
+	for(i = 0; i < maxfilter && demux[demux_id].demux_fd[i].fd > 0; i++)
+	{
+#if defined(supremo)
+		if(demux[demux_id].demux_fd[i].NumSlots > 1)
+			more_cnt += (maxfilter && demux[demux_id].demux_fd[i].NumSlots - 1);
+#endif
+	}
+
+#if defined(supremo)
+	i += more_cnt;
+#endif
+
 	if(i >= maxfilter)
 	{
-		cs_log_dbg(D_DVBAPI, "no free filter");
+		cs_log_dbg(D_DVBAPI, "no free filter (%d %d)", i, maxfilter);
+
+		for(i = 0; i < maxfilter && demux[demux_id].demux_fd[i].fd > 0; i++)
+		{
+			cs_log_dbg(D_DVBAPI, "fd[0x%08x] pid[0x%04x]", demux[demux_id].demux_fd[i].fd, demux[demux_id].demux_fd[i].pid);
+		}
+
 		return -1;
 	}
 	n = i;
@@ -903,10 +925,12 @@
 		cfg.dvbapi_listenport = 0;
 	}
 
-	int32_t i = 0, n = 0, devnum = -1, dmx_fd = 0, filtercount = 0;
+	int32_t i = 0, n = 0, devnum = -1, filtercount = 0;
 	char device_path[128], device_path2[128];
 	static LLIST *ll_max_fd;
 	ll_max_fd = ll_create("ll_max_fd");
+#if !defined(supremo)
+	int32_t dmx_fd = 0;
 	LL_ITER itr;
 
 	struct s_open_fd
@@ -915,6 +939,7 @@
 	};
 
 	struct s_open_fd *open_fd;
+#endif
 
 	while (i < BOX_COUNT)
 	{
@@ -924,6 +949,13 @@
 			snprintf(device_path, sizeof(device_path), devices[i].path, n);
 			strncat(device_path, device_path2, sizeof(device_path) - strlen(device_path) - 1);
 			filtercount = 0;
+
+#if defined(supremo)
+			if(devices[i].api == STAPI)
+			{
+				filtercount = 32; // wi
+			}
+#else
 			while((dmx_fd = open(device_path, O_RDWR | O_NONBLOCK)) > 0 && filtercount < MAX_FILTER)
 			{
 				filtercount++;
@@ -935,9 +967,11 @@
 				open_fd->fd = dmx_fd;
 				ll_append(ll_max_fd, open_fd);
 			}
+#endif
 
 			if(filtercount > 0)
 			{
+#if !defined(supremo)
 				itr = ll_iter_create(ll_max_fd);
 				while((open_fd = ll_iter_next(&itr)))
 				{
@@ -949,6 +983,7 @@
 					while(close(dmx_fd)<0);
 					ll_iter_remove_data(&itr);
 				}
+#endif
 				devnum = i;
 				selected_api = devices[devnum].api;
 				selected_box = devnum;
@@ -5273,6 +5308,14 @@
 
 	if(cfg.dvbapi_pmtmode != 4 && cfg.dvbapi_pmtmode != 5 && cfg.dvbapi_pmtmode != 6)
 	{
+#if defined(supremo)
+		// there is no /tmp.
+		// for test, run test_hi.sh
+		// it makes link /tmp to /mnt/ramdisk
+		// so this is problem. becase fcntl can not work on link file.
+
+		event_handler(SIGRTMIN + 1);
+#else
 		struct sigaction signal_action;
 		signal_action.sa_handler = event_handler;
 		sigemptyset(&signal_action.sa_mask);
@@ -5286,6 +5329,7 @@
 			fcntl(dir_fd, F_NOTIFY, DN_MODIFY | DN_CREATE | DN_DELETE | DN_MULTISHOT);
 			event_handler(SIGRTMIN + 1);
 		}
+#endif
 	}
 	else
 	{
Index: module-newcamd.c
===================================================================
--- module-newcamd.c	(revision 11438)
+++ module-newcamd.c	(working copy)
@@ -563,6 +563,11 @@
 	if(rs < 5) { rc = (-1); }
 	else { rc = rs; }
 
+#if defined(supremo)
+	if(rs == 5)
+		 cs_sleepms(10); // mg when init.
+#endif
+
 	cs_log_dump_dbg(D_CLIENT, buf, rs, "received %d bytes from %s", rs, remote_txt());
 	client->last = time((time_t *) 0);
 
